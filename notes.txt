extract
transform
load
            // Arrange

            // Act

            // Assert

ng-class = {md-primary: color-mode}

posts?$orderby=PublicationDate desc

http://originblogs.azurewebsites.net/
https://microsoft-apiappc17fc6a308404673b96dabcfab653613.azurewebsites.net/api/

https://microsoft-apiappc17fc6a308404673b96dabcfab653613.azurewebsites.net/api/account/ObtainLocalAccessToken?externalAccessToken=ya29.RwI3lIJSklooGQjRSlbOHyXFR_D_Nf5DmR-s7P4o-5pA-6to3q-ikL7e2vXtjasa-123&provider=Google",

Additional information: Microsoft Azure WebJobs SDK Dashboard connection string is missing or empty. The Microsoft Azure Storage account connection string can be set in the following ways:

1. Set the connection string named 'AzureWebJobsDashboard' in the connectionStrings section of the .config file in the following format <add name="AzureWebJobsDashboard" connectionString="DefaultEndpointsProtocol=http|https;AccountName=NAME;AccountKey=KEY" />, or

2. Set the environment variable named 'AzureWebJobsDashboard', or

3. Set corresponding property of JobHostConfiguration.

Front end:
Is register controller needed?
Does login controller need to call authService.login?

Back end:
How does externalLogin table get updated?
Does _userManager.AddLoginAsync in AuthRepository.AddLoginAsync attempt to write to table UserLogins?

private readonly IUserRepository _userRepository;

// GET: api/Blogs
        [EnableQuery]
        public IQueryable<BlogModel> GetBlogs()
        {
            var user = _userRepository.FirstOrDefault(u => u.UserName == User.Identity.Name);

            if(user.IsAuthenticated)
            {
                return _blogRepository.GetAll().ProjectTo<BlogModel>();
            }
            else
            {
                return null;
            }

	string emailInfo = "PostBlog";
            var emailLog = new EmailLog();
            string emailLogSentTo = "kds_snyder@yahoo.com";
            string emailLogSubject = "PostBlog Email Log";            
            emailLog.SendEmail(emailLogSentTo, emailLogSubject, emailInfo);

 var blogPosts = xmlDoc.Element("rss").Element("channel").Descendants("item");
                    foreach (var post in blogPosts)
                    {
                        var newPost = new Post();
                       
                        newPost.Content = post.Element(contentNameSpace + "encoded").Value;
                        newPost.Guid = post.Element("guid").Value;
                        newPost.Link = post.Element("link").Value;
                        newPost.PublicationDate = Convert.ToDateTime(post.Element("pubDate").Value);
                        newPost.Title = post.Element("title").Value;
                        newPost.Description = post.Element("description").Value;

                        posts.Add(newPost);
}

